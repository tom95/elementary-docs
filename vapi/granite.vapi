/* granite.vapi generated by valac 0.25.1.30-de160, do not modify. */

namespace Granite {
	namespace DateTime {
		[CCode (cheader_filename = "granite.h")]
		public static string get_default_date_format (bool with_weekday = false, bool with_day = true, bool with_year = false);
		[CCode (cheader_filename = "granite.h")]
		public static string get_default_time_format (bool is_12h = false, bool with_second = false);
	}
	namespace Drawing {
		/**
		 * A buffer containing an internal Cairo-usable surface and context, designed
		 * for usage with large, rarely updated draw operations.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class BufferSurface : GLib.Object {
			/**
			 * Constructs a new, empty {@link Granite.Drawing.BufferSurface} with the supplied dimensions.
			 *
			 * @param width the width of {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param height the height of the {@link Granite.Drawing.BufferSurface}, in pixels
			 */
			public BufferSurface (int width, int height);
			/**
			 * Averages all the colors in the internal {@link Cairo.Surface}.
			 *
			 * @return the {@link Granite.Drawing.Color} with the averaged color
			 */
			public Granite.Drawing.Color average_color ();
			/**
			 * Clears the internal {@link Cairo.Surface}, making all pixels fully transparent.
			 */
			public void clear ();
			/**
			 * Performs a blur operation on the internal {@link Cairo.Surface}, using an
			 * exponential blurring algorithm. This method is usually the fastest
			 * and produces good-looking results (though not quite as good as gaussian's).
			 *
			 * @param radius the blur radius
			 */
			public void exponential_blur (int radius);
			/**
			 * Performs a blur operation on the internal {@link Cairo.Surface}, using the
			 * fast-blur algorithm found here [[http://incubator.quasimondo.com/processing/superfastblur.pde]].
			 *
			 * @param radius the blur radius
			 * @param process_count the number of times to perform the operation
			 */
			public void fast_blur (int radius, int process_count = 1);
			/**
			 * Performs a blur operation on the internal {@link Cairo.Surface}, using a
			 * gaussian blurring algorithm. This method is very slow, albeit producing
			 * debatably the best-looking results, and in most cases developers should
			 * use the exponential blurring algorithm instead.
			 *
			 * @param radius the blur radius
			 */
			public void gaussian_blur (int radius);
			/**
			 * Creates a {@link Gdk.Pixbuf} from internal {@link Cairo.Surface}.
			 *
			 * @return the {@link Gdk.Pixbuf}
			 */
			public Gdk.Pixbuf load_to_pixbuf ();
			/**
			 * Constructs a new, empty {@link Granite.Drawing.BufferSurface} with the supplied dimensions, using
			 * the supplied {@link Granite.Drawing.BufferSurface} as a model.
			 *
			 * @param width the width of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param height the height of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param model the {@link Granite.Drawing.BufferSurface} to use as a model for the internal {@link Cairo.Surface}
			 */
			public BufferSurface.with_buffer_surface (int width, int height, Granite.Drawing.BufferSurface model);
			/**
			 * Constructs a new, empty {@link Granite.Drawing.BufferSurface} with the supplied dimensions, using
			 * the supplied {@link Cairo.Surface} as a model.
			 *
			 * @param width the width of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param height the height of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param model the {@link Cairo.Surface} to use as a model for the internal {@link Cairo.Surface}
			 */
			public BufferSurface.with_surface (int width, int height, Cairo.Surface model);
			/**
			 * The {@link Cairo.Context} for the internal surface. All drawing operations done on this
			 * {@link Granite.Drawing.BufferSurface} should use this context.
			 */
			public Cairo.Context context { get; }
			/**
			 * The height of the BufferSurface, in pixels.
			 */
			public int height { get; private set; }
			/**
			 * The {@link Cairo.Surface} which will store the results of all drawing operations
			 * made with {@link Granite.Drawing.BufferSurface.context}.
			 */
			public Cairo.Surface surface { get; private set; }
			/**
			 * The width of the {@link Granite.Drawing.BufferSurface}, in pixels.
			 */
			public int width { get; private set; }
		}
		/**
		 * A class containing an RGBA color and methods for more powerful color manipulation.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Color : GLib.Object, Granite.Services.SettingsSerializable {
			/**
			 * The value of the alpha channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double A;
			/**
			 * The value of the blue channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double B;
			/**
			 * The value of the green channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double G;
			/**
			 * The value of the red channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double R;
			/**
			 * Constructs a new {@link Granite.Drawing.Color} with the supplied values.
			 *
			 * @param R the value of the red channel as a double
			 * @param G the value of the green channel as a double
			 * @param B the value of the blue channel as a double
			 * @param A the value of the alpha channel as a double
			 */
			public Color (double R, double G, double B, double A);
			/**
			 * Adds the supplied hue value to this color's hue value.
			 *
			 * @param val the hue to add to this color's hue
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color add_hue (double val);
			/**
			 * Brightens this color's value by the supplied amount.
			 *
			 * @param amount the amount to brighten the value by
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color brighten_val (double amount);
			/**
			 * Darkens this color's value by the supplied amount * color's saturation.
			 *
			 * @param amount the amount to darken the value by
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color darken_by_sat (double amount);
			/**
			 * Darkens this color's value by the supplied amount.
			 *
			 * @param amount the amount to darken the value by
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color darken_val (double amount);
			/**
			 * Constructs a new {@link Granite.Drawing.Color} from a {@link Gdk.Color}.
			 *
			 * @param color the {@link Gdk.Color}
			 */
			public Color.from_gdk (Gdk.Color color);
			/** 
			 * Get the value.
			 * @return the hue of this color, as a double value
			 */
			public double get_hue ();
			/** 
			 * Get the value.
			 * @return the saturation of this color, as a double value
			 */
			public double get_sat ();
			/** 
			 * Get the value.
			 * 
			 * @return the value of this color, as a double value
			 */
			public double get_val ();
			/**
			 * Multiplies this color's saturation by the supplied amount.
			 *
			 * @param amount the amount to multiply the saturation by
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color multiply_sat (double amount);
			/**
			 * Changes the value of the alpha channel.
			 *
			 * @param alpha the value of the alpha channel
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_alpha (double alpha);
			/**
			 * Changes the hue of this color to the supplied one.
			 *
			 * @param hue the hue to change this color to
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_hue (double hue);
			/**
			 * Changes this color's saturation to the supplied saturation, if it is smaller than this color's saturation.
			 *
			 * @param sat the hue to change this color to
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_max_sat (double sat);
			/**
			 * Changes this color's value to the supplied value, if it is smaller than this color's value.
			 *
			 * @param val the value to change this color to
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_max_val (double val);
			/**
			 * Changes this color's saturation to the supplied saturation, if it is greater than this color's saturation.
			 *
			 * @param sat the saturation to change this color to
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_min_sat (double sat);
			/**
			 * Changes this color's value to the supplied value, if it is greater than this color's value.
			 *
			 * @param val the value to change this color to
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_min_value (double val);
			/**
			 * Changes the saturation of this color to the supplied one.
			 *
			 * @param sat the saturation to change this color to
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_sat (double sat);
			/**
			 * Changes the value of this color to the supplied one.
			 *
			 * @param val the value to change this color to
			 * 
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_val (double val);
		}
		/**
		 * A utility class for frequently-performed drawing operations.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Utilities : GLib.Object {
			public Utilities ();
			/**
			 * Averages the colors in the {@link Gdk.Pixbuf} and returns it.
			 *
			 * @param source the {@link Gdk.Pixbuf}
			 * 
			 * @return the {@link Granite.Drawing.Color} containing the averaged color
			 */
			public static Granite.Drawing.Color average_color (Gdk.Pixbuf source);
			/**
			 * Adds a closed sub-path rounded rectangle of the given size and border radius to the current path
			 * at position (x, y) in user-space coordinates.
			 *
			 * @param cr a {@link Cairo.Context}
			 * @param x the X coordinate of the top left corner of the rounded rectangle
			 * @param y the Y coordinate to the top left corner of the rounded rectangle
			 * @param width the width of the rounded rectangle
			 * @param height the height of the rounded rectangle
			 * @param radius the border radius of the rounded rectangle
			 */
			public static void cairo_rounded_rectangle (Cairo.Context cr, double x, double y, double width, double height, double radius);
		}
	}
	namespace GtkPatch {
		/***
		 Copyright (C) 2011-2013 Adrien Plazas <kekun.plazas@laposte.net>
		 
		 This program or library is free software; you can redistribute it
		 and/or modify it under the terms of the GNU Lesser General Public
		 License as published by the Free Software Foundation; either
		 version 3 of the License, or (at your option) any later version.
		 
		 This library is distributed in the hope that it will be useful,
		 but WITHOUT ANY WARRANTY; without even the implied warranty of
		 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
		 Lesser General Public License for more details.
		 
		 You should have received a copy of the GNU Lesser General
		 Public License along with this library; if not, write to the
		 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
		 Boston, MA 02110-1301 USA.
		 ***/
		[CCode (cheader_filename = "granite.h")]
		public class AboutDialog : Gtk.Dialog {
			/**
			 * Creates a new Granite.AboutDialog
			 */
			public AboutDialog ();
			/**
			 * The people who contributed artwork to the program, as a null-terminated array of strings.
			 */
			public string[] artists { get; set; }
			/**
			 * The authors of the program, as a null-terminated array of strings.
			 */
			public string[] authors { get; set; }
			/**
			 * Comments about the program.
			 */
			public string comments { get; set; }
			/**
			 * Copyright information for the program.
			 */
			public string copyright { get; set; }
			/**
			 * The people documenting the program, as a null-terminated array of strings.
			 */
			public string[] documenters { get; set; }
			/**
			 * The license of the program.
			 */
			public string license { get; set; }
			public Gtk.License license_type { get; set; }
			/**
			 * A logo for the about box.
			 */
			public Gdk.Pixbuf logo { get; set; }
			/**
			 * A named icon to use as the logo for the about box.
			 */
			public string logo_icon_name { get; set; }
			/**
			 * The name of the program.
			 */
			public string program_name { get; set; }
			/**
			 * Credits to the translators.
			 */
			public string translator_credits { get; set; }
			/**
			 * The version of the program.
			 */
			public string version { get; set; }
			/**
			 * The URL for the link to the website of the program.
			 */
			public string website { get; set; }
			/**
			 * The label for the link to the website of the program.
			 */
			public string website_label { get; set; }
			public virtual signal bool activate_link (string uri);
		}
	}
	namespace Services {
		/**
		 * Wrapper around a long-obsolete and unused revision of Contractor API
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Granite.Services.ContractorProxy", since = "0.2")]
		public class Contractor : GLib.Object {
			/**
			 * This creates a new Contractor 
			 */
			public Contractor ();
			/**
			 * This searches for available contracts of a particular file
			 *
			 * @param uri uri of file
			 * @param mime mime type of file
			 * @return Hashtable of available contracts
			 */
			public static GLib.HashTable<string,string>[] get_contract (string uri, string mime);
			/**
			 * generate contracts for arguments and filter them by common parent mimetype.
			 *
			 * @param locations Hashtable of locations
			 * @return Hashtable of available contracts
			 */
			public static GLib.HashTable<string,string>[] get_selection_contracts (GLib.HashTable<string,string>[] locations);
		}
		/**
		 * Provides a convenient GObject wrapper around Contractor's D-bus API
		 */
		[CCode (cheader_filename = "granite.h")]
		public class ContractorProxy : GLib.Object {
			/**
			 * Provides all the contracts.
			 *
			 * @return {@link Gee.List} containing all the contracts available in the system.
			 */
			public static Gee.List<Granite.Services.Contract> get_all_contracts () throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to the given mimetypes.
			 *
			 * @param mime_type Mimetype of file.
			 * @return {@link Gee.List} of contracts that support the given mimetype.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_by_mime (string mime_type) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to all given mimetypes.
			 *
			 * Only the contracts that support all of the mimetypes are returned.
			 *
			 * @param mime_types Array of mimetypes.
			 * @return {@link Gee.List} of contracts that support the given mimetypes.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_by_mimelist (string[] mime_types) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to the given file.
			 *
			 * Errors occurring in {@link GLib.File.query_info} method while looking up
			 * the file (e.g. if the file is deleted) are forwarded to the caller.
			 *
			 * @param file An existing file.
			 * @return {@link Gee.List} of contracts applicable to the given file.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_for_file (GLib.File file) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to all given files.
			 *
			 * Only the contracts that support all of the files are returned.<<BR>>
			 * Errors occurring in {@link GLib.File.query_info} method while looking up
			 * the file (e.g. if the file is deleted) are forwarded to the caller.<<BR>>
			 *
			 * @param files Array of existing files.
			 * @return {@link Gee.List} of contracts applicable to any of the given files.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_for_files (GLib.File[] files) throws GLib.Error;
			public static Granite.Services.ContractorProxy get_instance () throws GLib.Error;
			/**
			 * Emitted when the list of actions available to Contractor changes.
			 * Application should generally request the updated list of actions upon receiving this signal.
			 *
			 * This is not obligatory for frequently updated lists (e.g. in context menus), 
			 * but essential for applications that display action lists without re-requesting them.
			 */
			public signal void contracts_changed ();
		}
		/**
		 * This class provides an easy way to access symbolic icons.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class IconFactory : GLib.Object {
			public IconFactory ();
			public static Granite.Services.IconFactory get_default ();
			/**
			 * Loads a symbolic icon for the given icon name with a better chance
			 * for loading a symbolic icon in case of fallback than with {@link Gtk.IconTheme.load_icon}
			 * 
			 * Note that the resulting pixbuf may not be exactly the requested size;
			 * an icon theme may have icons that differ slightly from their nominal sizes,
			 * and in addition GTK+ will avoid scaling icons that it considers sufficiently close
			 * to the requested size or for which the source image would have to be scaled up too far
			 * (this maintains sharpness).
			 * 
			 * Due to the way {@link Gtk.IconLookupFlags.GENERIC_FALLBACK} works, Gtk readily
			 * falls back to the non-symbolic icon if the exact match for the provided name is not found,
			 * and only after that fails tries to look up alternative names of the icon itself.
			 * This function uses the same mechanism, but looks up the symbolic icon for the
			 * name chosen after all the fallbacks, and returns the symbolic one if it's present.
			 * This gives a better chance of getting a symbolic icon in case of fallbacks than
			 * when using {@link Gtk.IconTheme.load_icon}
			 * 
			 * @return a {@link Gdk.Pixbuf} with the rendered icon; this may be a newly created icon
			 * or a new reference to an internal icon, so you must not modify the icon.
			 * Returns null if the icon was not found in the theme hierarchy.
			 */
			public Gdk.Pixbuf? load_symbolic_icon (Gtk.StyleContext style, string iconname, int size);
			/**
			 * Attempts to load a symbolic icon for the given {@link Glib.Icon} 
			 * with graceful fallback on the non-symbolic variant if the symbolic one
			 * does not exist.
			 * 
			 * Note that the resulting pixbuf may not be exactly the requested size;
			 * an icon theme may have icons that differ slightly from their nominal sizes,
			 * and in addition GTK+ will avoid scaling icons that it considers sufficiently close
			 * to the requested size or for which the source image would have to be scaled up too far
			 * (this maintains sharpness).
			 *
			 * @return a {@link Gdk.Pixbuf} with the rendered icon; this may be a newly created icon
			 * or a new reference to an internal icon, so you must not modify the icon.
			 * Returns null if the icon was not found in the theme hierarchy.
			 */
			public Gdk.Pixbuf? load_symbolic_icon_from_gicon (Gtk.StyleContext style, GLib.Icon gicon, int size);
		}
		/**
		 * This class helps in the use of logs in a Granite application.
		 * 
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Logger : GLib.Object {
			public Logger ();
			/**
			 * This method initializes the Logger
			 * 
			 * @param app_name name of app that is logging
			 */
			public static void initialize (string app_name);
			/**
			 * Logs message using Notify level formatting
			 * 
			 * @param msg message to be logged
			 */
			public static void notification (string msg);
			/**
			 * This is used to determine which level of LogLevelling should be used.
			 */
			public static Granite.Services.LogLevel DisplayLevel { get; set; }
		}
		/**
		 * A class for interacting with frequently-used directories, following the
		 * XDG Base Directory specification: [[http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html]]
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Paths : GLib.Object {
			public Paths ();
			/**
			 * Ensure the directory exists, by creating it if it does not.
			 *
			 * @param dir the directory in question
			 *
			 * @return `true` is the directory exists, `false` if it does not
			 */
			public static bool ensure_directory_exists (GLib.File dir);
			/**
			 * Initialize all the paths using the supplied app name and path to the app's data folder.
			 *
			 * @param app_name the name of the application
			 * @param data_folder_path the path to the application's data folder
			 */
			public static void initialize (string app_name, string data_folder_path);
			/**
			 * Path passed in to initialize method; should be Build.PKGDATADIR.
			 */
			public static GLib.File data_folder { get; protected set; }
			/**
			 * User's home folder - $HOME
			 */
			public static GLib.File home_folder { get; protected set; }
			/**
			 * defaults to xdg_cache_home_folder/app_name
			 */
			public static GLib.File user_cache_folder { get; protected set; }
			/**
			 * defaults to xdg_config_home_folder/app_name
			 */
			public static GLib.File user_config_folder { get; protected set; }
			/**
			 * defaults to xdg_data_home_folder/app_name
			 */
			public static GLib.File user_data_folder { get; protected set; }
			/** 
			 * $XDG_CACHE_HOME - defaults to $HOME/.cache
			 */
			public static GLib.File xdg_cache_home_folder { get; protected set; }
			/**
			 * $XDG_CONFIG_HOME - defaults to $HOME/.config
			 */
			public static GLib.File xdg_config_home_folder { get; protected set; }
			/**
			 * $XDG_DATA_DIRS - defaults to /usr/local/share/:/usr/share/
			 */
			public static GLib.List<GLib.File> xdg_data_dir_folders { get; protected owned set; }
			/**
			 * $XDG_DATA_HOME - defaults to $HOME/.local/share
			 */
			public static GLib.File xdg_data_home_folder { get; protected set; }
		}
		/**
		 * Class for interacting with an internal {@link GLib.Settings} using native Vala properties.
		 * Clients of this class should not connect to the {@link GLib.Object.notify} signal.
		 * Instead, they should connect to the {@link Granite.Services.Settings.changed} signal.
		 *
		 * For example, if a developer wanted to interact with desktop.Wallpaper's (http:/www.launchpad.net/pantheon-wallpaper) schema,
		 * this is what his/her subclass might look like:
		 *
		 * {{{
		 *    public class WallpaperSettings : Granite.Services.Settings {
		 *    
		 *        public PictureMode picture_mode { get; set; }
		 *    
		 *        public string picture_path { get; set; }
		 *    
		 *        public string background_color { get; set; }
		 *    
		 *        public WallpaperSettings () {
		 *            base ("desktop.Wallpaper");
		 *        }
		 *    
		 *        protected override void verify (string key) {
		 *    
		 *            switch (key) {
		 *    
		 *                case "background-color":
		 *                    Gdk.Color bg;
		 *                    if (!Gdk.Color.parse (background_color, out bg))
		 *                        background_color = "#000000";
		 *                    break;
		 *            }
		 *        }
		 *    
		 *    }
		 * }}}
		 *
		 * Keep in mind that the developer must define his/her enums to match the schema's.
		 * 
		 * The following is a simplified explanation of how this library works:
		 *
		 *  1. Any subclass looks at all properties it contains, and loads their initial values from the keys they represent.
		 *     Because Vala properties are stored as GLib properties, the string representation of a property replaces underscores with
		 *     hyphens (i.e. property_name becomes "property-name"). This is how this library knows which keys to load from. If the key
		 *     does not exist, it will result in a fatal error.
		 *  1. When a property of the subclass changes, the library will first verify the data before emitting a changed signal. If necessary,
		 *     the library will change the value of the property while verifying.
		 *     This is why developers should only act upon emissions of the changed () signal and never the native {@link GLib.Object.notify} signal.
		 *  1. When the corresponding key of one of the properties of the subclass changes, it will also verify the data and change it, if necessary,
		 *     before loading it into as the corresponding property's value.
		 */
		[CCode (cheader_filename = "granite.h")]
		public abstract class Settings : GLib.Object {
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema.
			 *
			 * @param schema the name of the schema to interact with
			 */
			public Settings (string schema);
			/**
			 * Verify the given key, changing the property if necessary. Refer to the example given for the class.
			 *
			 * @param key the key in question
			 */
			protected virtual void verify (string key);
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema and {@link GLib.SettingsBackend}.
			 *
			 * @param schema the name of the schema to interact with
			 * @param backend the desired backend to use
			 */
			public Settings.with_backend (string schema, GLib.SettingsBackend backend);
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema, {@link GLib.SettingsBackend}, and path.
			 * 
			 *
			 * @param schema the name of the schema to interact with
			 * @param backend the desired backend to use
			 * @param path the path to use
			 */
			public Settings.with_backend_and_path (string schema, GLib.SettingsBackend backend, string path);
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema, and path.
			 * 
			 * You only need to do this if you want to directly create a settings object with a schema that
			 * doesn't have a specified path of its own. That's quite rare.
			 *
			 * It is a programmer error to call this function for a schema that has an explicitly specified path.
			 *
			 * @param schema the name of the schema to interact with
			 * @param path the path to use
			 */
			public Settings.with_path (string schema, string path);
			public GLib.Settings schema { get; construct; }
			/**
			 * This signal is to be used in place of the standard {@link GLib.Object.notify} signal.
			 *
			 * This signal ''only'' emits after a property's value was verified.
			 *
			 * Note that in the case where a property was set to an invalid value,
			 * (and thus, sanitized to a valid value), the {@link GLib.Object.notify} signal will emit 
			 * twice: once with the invalid value and once with the sanitized value.
			 */
			[Signal (action = true, detailed = true, no_hooks = true, no_recurse = true, run = "first")]
			public signal void changed ();
		}
		/**
		 * This class is a wrapper to run an async command. It provides useful signals.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class SimpleCommand : GLib.Object {
			/**
			 * The whole current error output
			 */
			public string error_output_str;
			/**
			 * The whole current output
			 */
			public string output_str;
			/**
			 * The whole current standard output
			 */
			public string standard_output_str;
			/**
			 * Create a new object. You will have to call run() when you want to run the command.
			 *
			 * @param dir The working dir
			 * @param command The command to execute (using absolute paths like /usr/bin/make causes less
			 * strange bugs).
			 *
			 */
			public SimpleCommand (string dir, string command);
			/**
			 * Launch the command. It is async.
			 */
			public void run ();
			/**
			 * Emitted when the command is finished.
			 */
			public signal void done (int exit);
			/**
			 * When the error output is changed.
			 *
			 * @param text the new text from std.err
			 */
			public signal void error_changed (string text);
			/**
			 * When the output changed (std.out and std.err).
			 *
			 * @param text the new text
			 */
			public signal void output_changed (string text);
			/**
			 * When the standard output is changed.
			 *
			 * @param text the new text from std.out
			 */
			public signal void standard_changed (string text);
		}
		/**
		 * Utility class for frequently-used system-related functions, such as opening files, launching
		 * applications, or executing terminal commands.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class System : GLib.Object {
			public System ();
			/**
			 * Executes the specified command.
			 *
			 * @param command the command to execute
			 */
			public static bool execute_command (string command);
			/**
			 * Launches the specified application.
			 *
			 * @param app the {@link GLib.File} representing the application to launch
			 */
			public static void launch (GLib.File app);
			/**
			 * Launches the supplied files with the specified application.
			 *
			 * @param app the {@link GLib.File} representing the application to launch
			 * @param files an array of {@link GLib.File} to open
			 */
			public static void launch_with_files (GLib.File? app, GLib.File[] files);
			/**
			 * Opens the specified file with the default application.
			 *
			 * @param file the {@link GLib.File} to open
			 */
			public static void open (GLib.File file);
			/**
			 * Opens the specified files with the default application.
			 *
			 * @param files an array of {@link GLib.File} to open
			 */
			public static void open_files (GLib.File[] files);
			/**
			 * Opens the specified URI with the default application.  This can be used for opening websites
			 * with the default browser, etc.
			 *
			 * @param uri the URI to open
			 */
			public static void open_uri (string uri);
		}
		/**
		 * Interface for executing and accessing properties of Contractor actions
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface Contract : GLib.Object {
			/**
			 * Executes the action on the given file
			 */
			public abstract void execute_with_file (GLib.File file) throws GLib.Error;
			/**
			 * Executes the action on the given list of files
			 */
			public abstract void execute_with_files (GLib.File[] files) throws GLib.Error;
			/**
			 * Returns the description of the contract, already internationalized
			 *
			 * @return The internationalized value of the 'Description' key in the .contract file.
			 * As of 2014, Contractor uses gettext to handle internationalization.
			 */
			public abstract string get_description ();
			/**
			 * Returns the display name of the contract, already internationalized
			 *
			 * @return The internationalized value of the 'Name' key in the .contract file.
			 * As of 2014, Contractor uses gettext to handle internationalization.
			 */
			public abstract string get_display_name ();
			/**
			 * Returns an icon for this contract
			 *
			 * @return {@link Glib.Icon} based on the 'Icon' key in the .contract file.
			 */
			public abstract GLib.Icon get_icon ();
		}
		/**
		 * This interface is used by objects that need to be serialized in a Settings.
		 * The object must have a string representation and provide these methods to
		 * translate between the string and object representations.
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SettingsSerializable : GLib.Object {
			/**
			 * Un-serializes the object from a string representation.
			 *
			 * @param s the string representation of the object
			 */
			public abstract void settings_deserialize (string s);
			/**
			 * Serializes the object into a string representation.
			 *
			 * @return the string representation of the object
			 */
			public abstract string settings_serialize ();
		}
		/**
		 * LogLevel:
		 */
		[CCode (cheader_filename = "granite.h")]
		public enum LogLevel {
			/**
			 * This level is for use in debugging.
			 */
			DEBUG,
			/**
			 * This level should be used for non-error, non-debugging that is not due to any direct event.
			 */
			INFO,
			/**
			 * This level is used to log events that have happened in the app.
			 */
			NOTIFY,
			/**
			 * This level should be used for warnings of errors that haven't happened yet.
			 */
			WARN,
			/**
			 * This level should be used by recoverable errors.
			 */
			ERROR,
			/**
			 * This level should be used only in cases of unrecoverable errors.
			 */
			FATAL
		}
		/**
		 * thrown by {@link Granite.Services.ContractorProxy}
		 */
		[CCode (cheader_filename = "granite.h")]
		public errordomain ContractorError {
			/**
			 * Usually means that Contractor is not installed or not configured properly
			 *
			 * Contractor is not a compile-time dependency, so it is possible to
			 * install an application that uses it without installing Contractor.
			 *
			 * Upon receiving this error the application should disable its Contractor-related
			 * functionality, which typically means hiding the relevant UI elements.
			 */
			SERVICE_NOT_AVAILABLE
		}
		[CCode (cheader_filename = "granite.h")]
		public static Granite.Services.IconFactory? icon_factory;
	}
	namespace StyleClass {
		[CCode (cheader_filename = "granite.h")]
		public const string BADGE;
		[CCode (cheader_filename = "granite.h")]
		public const string CATEGORY_EXPANDER;
		[CCode (cheader_filename = "granite.h")]
		public const string COMPOSITED;
		[CCode (cheader_filename = "granite.h")]
		public const string CONTENT_VIEW;
		[CCode (cheader_filename = "granite.h")]
		public const string CONTENT_VIEW_WINDOW;
		[CCode (cheader_filename = "granite.h")]
		public const string DECORATED_WINDOW;
		[CCode (cheader_filename = "granite.h")]
		public const string H1_TEXT;
		[CCode (cheader_filename = "granite.h")]
		public const string H2_TEXT;
		[CCode (cheader_filename = "granite.h")]
		public const string H3_TEXT;
		[CCode (cheader_filename = "granite.h")]
		public const string HELP_BUTTON;
		[CCode (cheader_filename = "granite.h")]
		public const string OVERLAY_BAR;
		[CCode (cheader_filename = "granite.h")]
		public const string POPOVER;
		[CCode (cheader_filename = "granite.h")]
		public const string POPOVER_BG;
		[CCode (cheader_filename = "granite.h")]
		public const string SOURCE_LIST;
		[CCode (cheader_filename = "granite.h")]
		public const string THIN_PANE_SEPARATOR;
		[CCode (cheader_filename = "granite.h")]
		public const string TITLE_TEXT;
	}
	namespace Widgets {
		/**
		 * This class helps to apply CSS to widgets.
		 */
		namespace Utils {
			/**
			 * This method applies given text style to given label
			 * 
			 * @param text_style text style to apply
			 * @param label label to apply style to
			 */
			[CCode (cheader_filename = "granite.h")]
			public static void apply_text_style_to_label (Granite.TextStyle text_style, Gtk.Label label);
			/**
			 * This methods returns the schema used by {@link Granite.Widgets.Utils.get_default_close_button_position}
			 * to determine the close button placement. It will first check for the pantheon/gala schema and then fallback
			 * to the default gnome one. If neither is available, NULL is returned. Make sure to check for this case, 
			 * as otherwise your program may crash on startup.
			 *
			 * @return the schema name
			 */
			[CCode (cheader_filename = "granite.h")]
			public static string? get_button_layout_schema ();
			[CCode (cheader_filename = "granite.h", cname = "get_close_pixbuf")]
			public static Gdk.Pixbuf get_close_pixbuf ();
			/**
			 * @return a new {@link Gtk.CssProvider}, or null in case the parsing of
			 *         //stylesheet// failed.
			 */
			[CCode (cheader_filename = "granite.h")]
			public static Gtk.CssProvider? get_css_provider (string stylesheet);
			/**
			 * This method detects the close button position as configured for the window manager. If you
			 * need to know when this key changed, it's best to listen on the schema returned by
			 * {@link Granite.Widgets.Utils.get_button_layout_schema} for changes and then call this method again.
			 *
			 * @param position a {@link Granite.CloseButtonPosition} indicating where to best put the close button
			 * @return if no schema was detected by {@link Granite.Widgets.Utils.get_button_layout_schema}
			 *         or there was no close value in the button-layout string, false will be returned. The position
			 *         will be LEFT in that case.
			 */
			[CCode (cheader_filename = "granite.h")]
			public static bool get_default_close_button_position (out Granite.CloseButtonPosition position);
			/**
			 * Applies the stylesheet to the widget
			 * 
			 * @param widget widget to apply style to
			 * @param stylesheet style to apply to screen
			 * @param class_name class name to add style to
			 * @param priority priorty of change
			 */
			[CCode (cheader_filename = "granite.h")]
			public static Gtk.CssProvider? set_theming (Gtk.Widget widget, string stylesheet, string? class_name, int priority);
			/**
			 * Applies a stylesheet to the given screen. This will affects all the
			 * widgets which are part of that screen.
			 * 
			 * @param screen Screen to apply style to
			 * @param stylesheet style to apply to screen
			 * @param priority priorty of change
			 */
			[CCode (cheader_filename = "granite.h")]
			public static Gtk.CssProvider? set_theming_for_screen (Gdk.Screen screen, string stylesheet, int priority);
		}
		/**
		 * This class makes an about dialog which goes in the App Menu on most apps.
		 * 
		 * {{../images/AboutDialog.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class AboutDialog : Granite.GtkPatch.AboutDialog {
			/**
			 * Creates a new Granite.Widgets.AboutDialog
			 */
			public AboutDialog ();
			/**
			 * The URL for the link to the website of the program.
			 */
			public string bug { get; set; }
			/**
			 * The URL for the link to the website of the program.
			 */
			public string help { get; set; }
			/**
			 * The URL for the link to the website of the program.
			 */
			public string translate { get; set; }
		}
		/**
		 * An App Menu is the gear menu that goes on the right of the toolbar.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class AppMenu : Granite.Widgets.ToolButtonWithMenu {
			/**
			 * Menu item for about page.
			 */
			public Gtk.MenuItem about_item;
			/**
			 * Makes new AppMenu.
			 *
			 * @param menu menu to be turned into an AppMenu.
			 */
			public AppMenu (Gtk.Menu menu);
			/**
			 * This method adds makes a properly formatted App Menu menu from given menu
			 * 
			 * @param menu menu to format
			 */
			public void add_items (Gtk.Menu menu);
			/**
			 * Makes new AppMenu with built-in about page.
			 *
			 * @param application application of AppMenu.
			 * @param menu menu to be created.
			 */
			public AppMenu.with_app (Granite.Application? application, Gtk.Menu menu);
			/**
			 * Create a new AppMenu, parameters are unused now.
			 */
			[Deprecated (since = "granite-0.1")]
			public AppMenu.with_urls (Gtk.Menu menu, string help_url, string translate_url, string bug_url);
			/**
			 * Called when showing about.
			 */
			public signal void show_about (Gtk.Widget w);
		}
		/**
		 * A badge renderer.
		 *
		 * Informs the user quickly on the content of the corresponding view. For example
		 * it might be used to show how much songs are in a playlist or how much updates
		 * are available.
		 *
		 * {{../images/cellrendererbadge.png}}
		 *
		 * @since 0.2
		 */
		[CCode (cheader_filename = "granite.h")]
		public class CellRendererBadge : Gtk.CellRenderer {
			public CellRendererBadge ();
			public override void get_preferred_height_for_width (Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
			public override void get_preferred_width (Gtk.Widget widget, out int minimum_size, out int natural_size);
			public override Gtk.SizeRequestMode get_request_mode ();
			[Deprecated (replacement = "Gtk.CellRenderer.get_preferred_size", since = "")]
			public override void get_size (Gtk.Widget widget, Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
			public override void render (Cairo.Context context, Gtk.Widget widget, Gdk.Rectangle bg_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
			public string text { get; set; }
		}
		/**
		 * An expander renderer.
		 *
		 * For it to draw an expander, the the {@link Gtk.CellRenderer.is_expander} property must
		 * be set to true; otherwise nothing is drawn. The state of the expander (i.e. expanded or
		 * collapsed) is controlled by the {@link Gtk.CellRenderer.is_expanded} property. 
		 *
		 * @since 0.2
		 */
		[CCode (cheader_filename = "granite.h")]
		public class CellRendererExpander : Gtk.CellRenderer {
			public CellRendererExpander ();
			/**
			 * Gets the size of the expander arrow.
			 *
			 * The default implementation tries to retrieve the "expander-size" style property from
			 * //widget//, as it is primarily meant to be used along with a {@link Gtk.TreeView}.
			 * For those with special needs, it is recommended to override this method.
			 *
			 * @param widget Widget used to query the "expander-size" style property (should be a Gtk.TreeView.)
			 * @return Size of the expander arrow.
			 * @since 0.2
			 */
			public virtual int get_arrow_size (Gtk.Widget widget);
			public override void get_preferred_height_for_width (Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
			public override void get_preferred_width (Gtk.Widget widget, out int minimum_size, out int natural_size);
			public override Gtk.SizeRequestMode get_request_mode ();
			[Deprecated (replacement = "Gtk.CellRenderer.get_preferred_size", since = "")]
			public override void get_size (Gtk.Widget widget, Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
			public override void render (Cairo.Context context, Gtk.Widget widget, Gdk.Rectangle bg_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
			public bool is_category_expander { get; set; }
		}
		/**
		 * A paned that can be easily collapsed by double-clicking over the pane separator.
		 * If it was previously collapsed, it is expanded, and vice-versa.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class CollapsiblePaned : Gtk.Paned {
			public CollapsiblePaned (Gtk.Orientation orientation);
			public Granite.CollapseMode collapse_mode { get; set; }
		}
		/**
		 * A transparent window without decorations and so on. Useful for any kinds of overlays and similar things
		 */
		[CCode (cheader_filename = "granite.h")]
		public class CompositedWindow : Gtk.Window, Gtk.Buildable {
			public CompositedWindow ();
		}
		/**
		 * This class provides a simple menu for managing Contractor.
		 * It uses a long-obsolete and unused revision of Contractor API and will not
		 * work with stable releases of Contractor.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (since = "0.2")]
		public class ContractorMenu : Gtk.Menu {
			public delegate void ContractCallback ();
			/**
			 * Makes new Contractor Meu
			 *
			 * @param filename the filename of the file
			 * @param mime the mime-type of the file
			 */
			public ContractorMenu (string filename, string mime);
			/**
			 * Adds new item to Contractor Menu
			 *
			 * @param name name of menu item
			 * @param icon_name the desired icon for menu item
			 * @param position desired position of menu item
			 * @param method method to be called when menu item is clicked
			 * @param use_stock tells whether to use stock for menu item
			 */
			public void add_item (string name, string icon_name, int position, Granite.Widgets.ContractorMenu.ContractCallback method, bool use_stock = true);
			/**
			 * Deletes a group of menu items
			 *
			 * @param names of menu items to delete
			 */
			public void name_blacklist (string[] names);
			/**
			 * Updates Contractor menu items
			 *
			 * @param filename the filename of the file
			 * @param mime the mime-type of the file
			 */
			public void update (string? filename, string? mime);
			/**
			 * Passes when contract is clicked
			 */
			public signal void contract_activated (string contract_name);
		}
		/**
		 * This class provides a simple way to look at contracts from Contractor.
		 * It uses a long-obsolete and unused revision of Contractor API and will not
		 * work with stable releases of Contractor.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (since = "0.2")]
		public class ContractorView : Gtk.TreeView {
			public delegate void ContractCallback ();
			/**
			 * indicates if it was possible to connect to contractor
			 */
			public bool contractor_available;
			/**
			 * Create the default ContractorView
			 *
			 * @param filename the file
			 * @param mime the mimetype of the file
			 * @param icon_size the size of the icon in pixel
			 * @param show_contract_name show the name of the contract in the list
			 */
			public ContractorView (string filename, string mime, int icon_size = 32, bool show_contract_name = true);
			/**
			 * A method to add items to the tree
			 *
			 * @param name the name
			 * @param desc the description
			 * @param icon_name the name of the icon to show
			 * @param icon_size the size of the icon in pixel
			 * @param position the posion the item will be inserted at (first position  is 0)
			 * @param method a general method containing all the methods that should be called when the item is activated
			 *        (must return void and mustn't have any parameter)
			 */
			public void add_item (string name, string desc, string icon_name, int icon_size, int position, Granite.Widgets.ContractorView.ContractCallback method);
			public void name_blacklist (string[] names);
			public void run_selected ();
			/**
			 * the index of the currently selected contract
			 */
			public int selected { get; set; }
			/**
			 * A contract was launched using double clicking
			 */
			public signal void executed ();
		}
		/**
		 * This class allows users to pick dates from a calendar.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class DatePicker : Gtk.Entry, Gtk.Buildable {
			/**
			 * The Calendar to create the DatePicker
			 */
			protected Gtk.Calendar calendar;
			/**
			 * Dropdown of DatePicker
			 */
			protected Gtk.EventBox dropdown;
			public DatePicker ();
			protected virtual void position_dropdown (out Gdk.Rectangle rect);
			/**
			 * Makes a new DatePicker
			 *
			 * @param format desired format of new DatePicker
			 */
			public DatePicker.with_format (string format);
			/**
			 * Current Date
			 */
			public GLib.DateTime date { get; set; }
			/**
			 * Desired format of DatePicker
			 */
			public string format { get; construct; }
		}
		/**
		 * This class is a standard decorated window.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Gtk.Dialog", since = "0.3")]
		public class DecoratedWindow : Granite.Widgets.CompositedWindow {
			protected Gdk.Pixbuf close_img;
			/**
			 * This creates a new DecoratedWindow
			 *
			 * @param title title to set window's title to
			 * @param window_style style to set window to
			 * @param content_style style to set content to
			 */
			public DecoratedWindow (string title = "", string? window_style = null, string? content_style = null);
			/**
			 * This method adds new item to window
			 *
			 * @param w widget to add to window
			 */
			public new void add (Gtk.Widget w);
			public override bool button_press_event (Gdk.EventButton e);
			public override bool button_release_event (Gdk.EventButton e);
			public override bool key_press_event (Gdk.EventKey event);
			/**
			 * This method removes item to window
			 *
			 * @param w widget to remove from window
			 */
			public new void remove (Gtk.Widget w);
			/**
			 * This method sets the given window to the decorated window style
			 *
			 * @param ref_window window to set style to
			 */
			public static void set_default_theming (Gtk.Window ref_window);
			protected Gtk.Box box { get; private set; }
			protected Gtk.Window draw_ref { get; private set; }
			/**
			 * Whether to show the window title
			 */
			public bool show_title { get; set; }
		}
		/**
		 * Tab bar widget designed for a variable number of tabs.
		 * Supports showing a "New tab" button, restoring closed tabs, "pinning" tabs, and more.
		 *
		 * {{../images/DynamicNotebook.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class DynamicNotebook : Gtk.EventBox {
			public enum TabBarBehavior {
				ALWAYS,
				SINGLE,
				NEVER
			}
			/**
			 * Create a new dynamic notebook
			 */
			public DynamicNotebook ();
			public new GLib.List<Gtk.Widget> get_children ();
			public Gtk.Widget get_nth_page (int index);
			public Granite.Widgets.Tab? get_tab_by_index (int index);
			public Granite.Widgets.Tab? get_tab_by_widget (Gtk.Widget widget);
			public int get_tab_position (Granite.Widgets.Tab tab);
			public uint insert_tab (Granite.Widgets.Tab tab, int index);
			public void next_page ();
			public void previous_page ();
			public void remove_tab (Granite.Widgets.Tab tab);
			public void set_tab_position (Granite.Widgets.Tab tab, int position);
			public override void show ();
			/**
			 * The text shown in the add button tooltip
			 */
			public string add_button_tooltip { get; set; }
			public bool add_button_visible { get; set; }
			public bool allow_drag { get; set; }
			public bool allow_duplication { get; set; }
			public bool allow_new_window { get; set; }
			public bool allow_pinning { get; set; }
			public bool allow_restoring { get; set; }
			public Granite.Widgets.Tab current { get; set; }
			public bool force_left { get; set; }
			public string group_name { get; set; }
			/**
			 * Set or get the upper limit of the size of the set
			 * of restorable tabs.
			 */
			public int max_restorable_tabs { get; set; }
			/**
			 * The menu appearing when the notebook is clicked on a blank space
			 */
			public Gtk.Menu menu { get; private set; }
			/**
			 * number of pages
			 */
			public int n_tabs { get; }
			public bool show_icons { get; set; }
			/**
			 * Hide the tab bar and only show the pages
			 */
			public bool show_tabs { get; set; }
			/**
			 * The behavior of the tab bar and its visibility
			 */
			public Granite.Widgets.DynamicNotebook.TabBarBehavior tab_bar_behavior { get; set; }
			public GLib.List<Granite.Widgets.Tab> tabs { get; }
			public bool tabs_closable { get; set; }
			public signal bool close_tab_requested (Granite.Widgets.Tab tab);
			public signal void new_tab_requested ();
			public signal void tab_added (Granite.Widgets.Tab tab);
			public signal void tab_duplicated (Granite.Widgets.Tab duplicated_tab);
			public signal void tab_moved (Granite.Widgets.Tab tab, int x, int y);
			public signal void tab_removed (Granite.Widgets.Tab tab);
			public signal void tab_reordered (Granite.Widgets.Tab tab, int new_pos);
			public signal void tab_restored (string label, string data, GLib.Icon? icon);
			public signal void tab_switched (Granite.Widgets.Tab? old_tab, Granite.Widgets.Tab new_tab);
		}
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Granite.Widgets.CollapsiblePaned", since = "granite-0.2")]
		public class HCollapsablePaned : Granite.Widgets.CollapsiblePaned {
			public HCollapsablePaned ();
		}
		/**
		 * A text entry space with hint and clear icon
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Gtk.Entry.placeholder_text", since = "0.3")]
		public class HintedEntry : Gtk.Entry {
			/**
			 * Makes new hinted entry
			 *
			 * @param hint_string hint for new entry
			 */
			public HintedEntry (string hint_string);
			[Deprecated (replacement = "Gtk.Entry.get_text", since = "0.2")]
			public new string get_text ();
			[Deprecated (since = "0.2")]
			protected void hint ();
			[Deprecated (replacement = "Gtk.Entry.set_text", since = "0.2")]
			public new void set_text (string text);
			[Deprecated (since = "0.2")]
			protected void unhint ();
			public bool has_clear_icon { get; set; }
			public string hint_string { get; set; }
		}
		/**
		 * This is always-on-top, non-modal window with a large close button.
		 *
		 * {{../images/LightWindow.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Gtk.Dialog", since = "0.3")]
		public class LightWindow : Granite.Widgets.DecoratedWindow {
			/**
			 * Makes a new Window with the Light Theme
			 *
			 * @param title title of new window
			 */
			public LightWindow (string title = "");
		}
		/**
		 * This widget is a multiple option modal switch
		 *
		 * {{../images/ModeButton.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class ModeButton : Gtk.Box {
			/**
			 * Makes new ModeButton
			 */
			public ModeButton ();
			/**
			 * Appends given widget to ModeButton
			 *
			 * @param w widget to add to ModeButton
			 * @return index of new item
			 */
			public int append (Gtk.Widget w);
			/**
			 * Appends icon to ModeButton
			 *
			 * @param icon_name name of icon to append
			 * @param size desired size of icon
			 * @return index of appended item
			 */
			public int append_icon (string icon_name, Gtk.IconSize size);
			/**
			 * Appends Pixbuf to ModeButton
			 *
			 * @param pixbuf Gdk.Pixbuf to append to ModeButton
			 */
			public int append_pixbuf (Gdk.Pixbuf pixbuf);
			/**
			 * Appends text to ModeButton
			 *
			 * @param text text to append to ModeButton
			 * @return index of new item
			 */
			public int append_text (string text);
			/**
			 * Clears all children
			 */
			public void clear_children ();
			/**
			 * Removes item at given index
			 *
			 * @param index index of item to remove
			 */
			public new void remove (int index);
			/**
			 * Sets item of given index's activity
			 *
			 * @param new_active_index index of changed item
			 */
			public void set_active (int new_active_index);
			/**
			 * Changes visibility of item of given index
			 *
			 * @param index index of item to be modified
			 * @param val value to change the visiblity to
			 */
			public void set_item_visible (int index, bool val);
			/**
			 * Read-only length of current ModeButton
			 */
			public uint n_items { get; }
			/**
			 * Index of currently selected item.
			 */
			public int selected { get; set; }
			public signal void mode_added (int index, Gtk.Widget widget);
			public signal void mode_changed (Gtk.Widget widget);
			public signal void mode_removed (int index, Gtk.Widget widget);
		}
		/**
		 * A floating status bar that displays a single line of text.
		 *
		 * This widget is intended to be used as an overlay for a {@link Gtk.Overlay} and is placed in the
		 * bottom-right corner by default. You can change its position like you would do for any overlay
		 * widget used in a {@link Gtk.Overlay}.
		 *
		 * The Overlay Bar displays a single line of text that can be changed using the "status" property.
		 *
		 * {{../images/OverlayBar.png}}
		 *
		 * This widget tries to avoid getting in front of the content being displayed inside the {@link Gtk.Overlay}
		 * by moving itself horizontally to the opposite side from the current one when the mouse pointer enters
		 * the widget.
		 *
		 * For this widget to function correctly, the event {@link Gdk.EventMask.ENTER_NOTIFY_MASK} must be set
		 * for the parent {@link Gtk.Overlay}. Overlay Bar's constructor takes care of this automatically,
		 * but you have to be careful not to unset the event for the {@link Gtk.Overlay} at a later stage.
		 *
		 * @see Gtk.Overlay
		 */
		[CCode (cheader_filename = "granite.h")]
		public class OverlayBar : Gtk.EventBox {
			/**
			 * Create a new Overlay Bar, and add it to the {@link Gtk.Overlay}.
			 */
			public OverlayBar (Gtk.Overlay overlay);
			public override bool draw (Cairo.Context cr);
			public override void get_preferred_height_for_width (int width, out int minimum_height, out int natural_height);
			public override void get_preferred_width (out int minimum_width, out int natural_width);
			public override Gtk.SizeRequestMode get_request_mode ();
			public override void parent_set (Gtk.Widget? old_parent);
			/**
			 * Status text displayed inside the Overlay Bar.
			 */
			public string status { get; set; }
		}
		/**
		 * /!\ Unstable API
		 *
		 * PopOver widget. It is a Dialog you can attach to a widget, e.g. a button.
		 *
		 * It is a dialog you can attach to a widget, to make it look
		 * more consistent, and easier to understand. e.g. if you need to make a popup
		 * after clicking on a button as "Create a new document" to choose the type
		 * of the document, a popover is more adapted because you can see which button
		 * is related to the button, etc... It is also less agressive than a usual
		 * dialog because it doesn't hide a big part of the screen. And it is closed
		 * when it lose focus.
		 *
		 * {{../images/PopOver.png}}
		 *
		 */
		[CCode (cheader_filename = "granite.h")]
		public class PopOver : Gtk.Dialog {
			/**
			 * Location of small triangle of popover
			 */
			public enum PopPosition {
				NONE,
				TOPLEFT,
				TOPRIGHT,
				BOTTOMLEFT,
				BOTTOMRIGHT
			}
			protected int ARROW_HEIGHT;
			protected int ARROW_WIDTH;
			protected int BORDER_RADIUS;
			protected int BORDER_WIDTH;
			protected Gtk.Border PADDINGS;
			protected int SHADOW_SIZE;
			protected double arrow_offset;
			protected bool arrow_up;
			protected Granite.Drawing.BufferSurface? main_buffer;
			/**
			 * Create a new PopOver
			 */
			public PopOver ();
			public override bool button_press_event (Gdk.EventButton event);
			public override bool button_release_event (Gdk.EventButton event);
			protected void cairo_popover (Cairo.Context cr, double x, double y, double width, double height, double border_radius);
			public override bool draw (Cairo.Context cr);
			/**
			 * Hides popover
			 */
			public override void hide ();
			/**
			 * Grabs focus
			 * 
			 * @return false
			 */
			public override bool map_event (Gdk.EventAny event);
			public void move_to_coords (int x, int y, bool show = true);
			/**
			 * Move the popover to the coordinates of the given Gdk.Rectangle and
			 * position it acording to the width and height of the rectangle.
			 */
			public void move_to_rect (Gdk.Rectangle rect, bool show = true);
			/**
			 * Change the position of the popover, to display it under w.
			 *
			 * The arrow of the PopOver is moved at the bottom of the widget, and it is
			 * horizontally centered.
			 *
			 * @param w a normal Gtk.Widget, e.g. a button
			 */
			public void move_to_widget (Gtk.Widget w, bool show = true);
			/**
			 * Move the popover to the Gdk.Window window. The recommand method is
			 * move_to_widget, but this one can be used when we don't know which widget
			 * triggered the action (e.g. with a Gtk.Action).
			 */
			public void move_to_window (Gdk.Window window);
			protected void reset_buffers ();
			/**
			 * Set the parent window of the popover. It should not be needed, but it
			 * could solve some bugs on some window manager.
			 */
			public void set_parent_pop (Gtk.Window win);
			public override void show ();
		}
		/**
		 * A searchbar with hint-text.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Gtk.SearchEntry", since = "0.3")]
		public class SearchBar : Granite.Widgets.HintedEntry {
			/**
			 * Makes new search bar
			 *
			 * @param hint_string hint for new search bar
			 */
			public SearchBar (string hint_string);
			/**
			 * This value handles how much time (in ms) should pass
			 * after the user stops typing. By default it is set
			 * to 300 ms.
			 */
			public int pause_delay { get; set; }
			/**
			 * search_icon_release () signal is emitted after releasing the mouse button,
			 * which depends on the SearchBar's icon.
			 * It can be useful to show something on the icon press,
			 * we can show a PopOver, for example.
			 */
			public signal void search_icon_release ();
			/**
			 * text_changed () signal is emitted after a short delay,
			 * which depends on pause_delay.
			 * If you need a synchronous signal without any delay,
			 * use changed () method.
			 */
			public signal void text_changed_pause (string text);
		}
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Granite.Widgets.ThinPaned", since = "granite-0.2")]
		public class SidebarPaned : Granite.Widgets.ThinPaned {
			public SidebarPaned ();
		}
		/**
		 * A widget that can display a list of items organized in categories.
		 *
		 * The source list widget consists of a collection of items, some of which are also expandable (and
		 * thus can contain more items). All the items displayed in the source list are children of the widget's
		 * root item. The API is meant to be used as follows:
		 *
		 * 1. Create the items you want to display in the source list, setting the appropriate values for their
		 * properties. The desired hierarchy is achieved by creating expandable items and adding items to them.
		 * These will be displayed as descendants in the widget's tree structure. The expandable items that are
		 * not nested inside any other item are considered to be at root level, and should be added to
		 * the widget's root item.<<BR>>
		 *
		 * Expandable items located at the root level are treated as categories, and only support text.
		 *
		 * ''Example''<<BR>>
		 * The final tree will have the following structure:
		 * {{{
		 * Libraries
		 *   Music
		 * Stores
		 *   My Store
		 *      Music
		 *      Podcasts
		 * Devices
		 *   Player 1
		 *   Player 2
		 * }}}
		 *
		 * {{{
		 * var library_category = new Granite.Widgets.SourceList.ExpandableItem ("Libraries");
		 * var store_category = new Granite.Widgets.SourceList.ExpandableItem ("Stores");
		 * var device_category = new Granite.Widgets.SourceList.ExpandableItem ("Devices");
		 *
		 * var music_item = new Granite.Widgets.SourceList.Item ("Music");
		 *
		 * // "Libraries" will be the parent category of "Music"
		 * library_category.add (music_item);
		 *
		 * // We plan to add sub-items to the store, so let's use an expandable item
		 * var my_store_item = new Granite.Widgets.SourceList.ExpandableItem ("My Store");
		 * store_category.add (my_store_item);
		 *
		 * var my_store_podcast_item = new Granite.Widgets.SourceList.Item ("Podcasts");
		 * var my_store_music_item = new Granite.Widgets.SourceList.Item ("Music");
		 *
		 * my_store_item.add (my_store_music_item);
		 * my_store_item.add (my_store_podcast_item);
		 *
		 * var player1_item = new Granite.Widgets.SourceList.Item ("Player 1");
		 * var player2_item = new Granite.Widgets.SourceList.Item ("Player 2");
		 *
		 * device_category.add (player1_item);
		 * device_category.add (player2_item);
		 * }}}
		 *
		 * 2. Create a source list widget.<<BR>>
		 * {{{
		 * var source_list = new Granite.Widgets.SourceList ();
		 * }}}
		 *
		 * 3. Add root-level items to the {@link Granite.Widgets.SourceList.root} item.
		 * This item only serves as a container, and all its properties are ignored by the widget.
		 *
		 * {{{
		 * // This will add the main categories (including their children) to the source list. After
		 * // having being added to be widget, any other item added to any of these items
		 * // (or any other child item in a deeper level) will be automatically added too.
		 * // There's no need to deal with the source list widget directly.
		 *
		 * var root = source_list.root;
		 *
		 * root.add (library_category);
		 * root.add (store_category);
		 * root.add (device_category);
		 * }}}
		 *
		 * The steps mentioned above are enough for initializing the source list. Future changes to the items'
		 * properties are ''automatically'' reflected by the widget.
		 *
		 * Final steps would involve connecting handlers to the source list events, being
		 * {@link Granite.Widgets.SourceList.item_selected} the most important, as it indicates that
		 * the selection was modified.
		 *
		 * It is strongly recommended to pack the source list into the GUI using the
		 * {@link Granite.Widgets.ThinPaned} widget. It has aesthetic advantages and offers a wider
		 * re-size handle than {@link Gtk.Paned}. This is usually done as follows:
		 * {{{
		 * var pane = new Granite.Widgets.ThinPaned ();
		 * pane.pack1 (source_list, false, false);
		 * pane.pack2 (content_area, true, false);
		 * }}}
		 *
		 * @since 0.2
		 * @see Granite.Widgets.ThinPaned
		 */
		[CCode (cheader_filename = "granite.h")]
		public class SourceList : Gtk.ScrolledWindow {
			/**
			 * An item that can contain more items.
			 *
			 * It supports all the properties inherited from {@link Granite.Widgets.SourceList.Item},
			 * and behaves like a normal item, except when it is located at the root level; in that case,
			 * the following properties are ignored by the widget:
			 *
			 * * {@link Granite.Widgets.SourceList.Item.selectable}
			 * * {@link Granite.Widgets.SourceList.Item.editable}
			 * * {@link Granite.Widgets.SourceList.Item.icon}
			 * * {@link Granite.Widgets.SourceList.Item.activatable}
			 * * {@link Granite.Widgets.SourceList.Item.badge}
			 *
			 * Root-level expandable items (i.e. Main Categories) are ''not'' displayed when they contain
			 * zero visible children.
			 *
			 * @since 0.2
			 */
			public class ExpandableItem : Granite.Widgets.SourceList.Item {
				/**
				 * Creates a new {@link Granite.Widgets.SourceList.ExpandableItem}
				 *
				 * @param name Title of the item.
				 * @return (transfer full) A new {@link Granite.Widgets.SourceList.ExpandableItem}.
				 * @since 0.2
				 */
				public ExpandableItem (string name = "");
				/**
				 * Adds an item.
				 *
				 * {@link Granite.Widgets.SourceList.ExpandableItem.child_added} is fired after the item is added.
				 *
				 * While adding a child item, //the item it's being added to will set itself as the parent//.
				 * Please note that items are required to have their //parent// property set to //null// before
				 * being added, so make sure the item is removed from its previous parent before attempting
				 * to add it to another item. For instance:
				 * {{{
				 * if (item.parent != null)
				 *     item.parent.remove (item); // this will set item's parent to null
				 * new_parent.add (item);
				 * }}}
				 *
				 * @param item The item to add. Its parent __must__ be //null//.
				 * @see Granite.Widgets.SourceList.ExpandableItem.child_added
				 * @see Granite.Widgets.SourceList.ExpandableItem.remove
				 * @since 0.2
				 */
				public void add (Granite.Widgets.SourceList.Item item);
				/**
				 * Removes all the items contained by the item. It works similarly to
				 * {@link Granite.Widgets.SourceList.ExpandableItem.remove}.
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.remove
				 * @see Granite.Widgets.SourceList.ExpandableItem.child_removed
				 * @since 0.2
				 */
				public void clear ();
				/**
				 * Collapses the item and/or its children.
				 *
				 * @param inclusive Whether to also collapse this item (true), or only its children (false).
				 * @param recursive Whether to recursively collapse all the children (true), or only
				 * immediate children (false).
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void collapse_all (bool inclusive = true, bool recursive = true);
				/**
				 * Recursively collapses the item along with its parent(s).
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void collapse_with_parents ();
				/**
				 * Checks whether the item contains the specified child.
				 *
				 * This method only considers the item's immediate children.
				 *
				 * @param item Item to search.
				 * @return Whether the item was found or not.
				 * @since 0.2
				 */
				public bool contains (Granite.Widgets.SourceList.Item item);
				/**
				 * Expands the item and/or its children.
				 *
				 * @param inclusive Whether to also expand this item (true), or only its children (false).
				 * @param recursive Whether to recursively expand all the children (true), or only
				 * immediate children (false).
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void expand_all (bool inclusive = true, bool recursive = true);
				/**
				 * Recursively expands the item along with its parent(s).
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void expand_with_parents ();
				/**
				 * Removes an item.
				 *
				 * The {@link Granite.Widgets.SourceList.ExpandableItem.child_removed} signal is fired
				 * //after removing the item//. Finally (i.e. after all the handlers have been invoked),
				 * the item's {@link Granite.Widgets.SourceList.Item.parent} property is set to //null//.
				 * This has the advantage of letting signal handlers know the parent from which //item//
				 * is being removed.
				 *
				 * @param item The item to remove. This will fail if item has a different parent.
				 * @see Granite.Widgets.SourceList.ExpandableItem.child_removed
				 * @see Granite.Widgets.SourceList.ExpandableItem.clear
				 * @since 0.2
				 */
				public void remove (Granite.Widgets.SourceList.Item item);
				/**
				 * The item's children.
				 *
				 * This returns a newly-created list containing the children.
				 * It's safe to iterate it while removing items with
				 * {@link Granite.Widgets.SourceList.ExpandableItem.remove}
				 *
				 * @since 0.2
				 */
				public Gee.Collection<Granite.Widgets.SourceList.Item> children { owned get; }
				/**
				 * Whether the item is collapsible or not.
				 *
				 * When set to //false//, the item is //always// expanded and the expander is
				 * not shown. Please note that this will also affect the value returned by the
				 * {@link Granite.Widgets.SourceList.ExpandableItem.expanded} property.
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public bool collapsible { get; set; }
				public bool expanded { get; set; }
				/**
				 * Number of children contained by the item.
				 *
				 * @since 0.2
				 */
				public uint n_children { get; }
				/**
				 * Emitted when an item is added.
				 *
				 * @param item Item added.
				 * @see Granite.Widgets.SourceList.ExpandableItem.add
				 * @since 0.2
				 */
				public signal void child_added (Granite.Widgets.SourceList.Item item);
				/**
				 * Emitted when an item is removed.
				 *
				 * @param item Item removed.
				 * @see Granite.Widgets.SourceList.ExpandableItem.remove
				 * @since 0.2
				 */
				public signal void child_removed (Granite.Widgets.SourceList.Item item);
				/**
				 * Emitted when the item is expanded or collapsed.
				 *
				 * @since 0.2
				 */
				public virtual signal void toggled ();
			}
			/**
			 * A source list entry.
			 *
			 * Any change made to any of its properties will be ''automatically'' reflected
			 * by the {@link Granite.Widgets.SourceList} widget.
			 *
			 * @since 0.2
			 */
			public class Item : GLib.Object {
				/**
				 * Creates a new {@link Granite.Widgets.SourceList.Item}.
				 *
				 * @param name Name of the item.
				 * @return (transfer full) A new {@link Granite.Widgets.SourceList.Item}.
				 * @since 0.2
				 */
				public Item (string name = "");
				/**
				 * Invoked when the item is secondary-clicked or when the usual menu keys are pressed.
				 *
				 * @return A {@link Gtk.Menu} or //null// if nothing should be displayed.
				 * @since 0.2
				 */
				public virtual Gtk.Menu? get_context_menu ();
				/**
				 * An activatable icon that works like a button.
				 *
				 * It can be used for e.g. showing an //"eject"// icon on a device's item.
				 *
				 * @see Granite.Widgets.SourceList.Item.action_activated
				 * @since 0.2
				 */
				public GLib.Icon activatable { get; set; }
				/**
				 * A badge shown next to the item's name.
				 *
				 * It can be used for displaying the number of unread messages in the "Inbox" item,
				 * for instance.
				 *
				 * @since 0.2
				 */
				public string badge { get; set; }
				/**
				 * Whether the item's name can be edited from within the source list.
				 *
				 * When this property is set to //true//, users can edit the item by pressing
				 * the F2 key, or by double-clicking its name.
				 *
				 * ''This property only works for selectable items''.
				 *
				 * @see Granite.Widgets.SourceList.Item.selectable
				 * @see Granite.Widgets.SourceList.start_editing_item
				 * @since 0.2
				 */
				public bool editable { get; set; }
				/**
				 * Primary icon.
				 *
				 * This property should be used to give the user an idea of what the item represents
				 * (i.e. content type.)
				 *
				 * @since 0.2
				 */
				public GLib.Icon icon { get; set; }
				/**
				 * The item's name. Primary and most important information.
				 *
				 * @since 0.2
				 */
				public string name { get; set; }
				/**
				 * Parent {@link Granite.Widgets.SourceList.ExpandableItem} of the item.
				 * ''Must not'' be modified.
				 *
				 * @since 0.2
				 */
				public Granite.Widgets.SourceList.ExpandableItem parent { get; internal set; }
				/**
				 * Whether the item can be selected or not.
				 *
				 * Setting this property to true doesn't guarantee that the item will actually be
				 * selectable, since there are other external factors to take into account, like the
				 * item's {@link Granite.Widgets.SourceList.Item.visible} property; whether the item is
				 * a category; the parent item is collapsed, etc.
				 *
				 * @see Granite.Widgets.SourceList.Item.visible
				 * @since 0.2
				 */
				public bool selectable { get; set; }
				/**
				 * Whether the item should appear in the source list's tree or not.
				 *
				 * @since 0.2
				 */
				public bool visible { get; set; }
				/**
				 * The {@link Granite.Widgets.SourceList.Item.activatable} icon was activated.
				 *
				 * @see Granite.Widgets.SourceList.Item.activatable
				 * @since 0.2
				 */
				public virtual signal void action_activated ();
				/**
				 * Emitted when the item is double-clicked or when it is selected and one of the keys:
				 * Space, Shift+Space, Return or Enter is pressed. This signal is //also// for
				 * editable items.
				 *
				 * @since 0.2
				 */
				public virtual signal void activated ();
				/**
				 * Emitted when the user has finished editing the item's name.
				 *
				 * By default, if the name doesn't consist of white space, it is automatically assigned
				 * to the {@link Granite.Widgets.SourceList.Item.name} property. The default behavior can
				 * be changed by overriding this signal.
				 * @param new_name The item's new name (result of editing.)
				 * @since 0.2
				 */
				public virtual signal void edited (string new_name);
			}
			/**
			 * Deprecated delegate defined for sorting items. It's not relevant for new code
			 * because it's no longer used.
			 *
			 * @param a First item.
			 * @param b Second item.
			 * @return A //negative// integer if //a// sorts after //b//, //zero// if //a// equals //b//,
			 *         or a //positive// integer if //a// sorts before //b//.
			 * @since 0.2
			 */
			[Deprecated (replacement = "SourceListSortable.compare", since = "0.2")]
			public delegate int SortFunc (Granite.Widgets.SourceList.Item a, Granite.Widgets.SourceList.Item b);
			/**
			 * A {@link Granite.Widgets.SourceList.VisibleFunc} should return true if the item should be
			 * visible; false otherwise. If //item//'s {@link Granite.Widgets.SourceList.Item.visible}
			 * property is set to //false//, then it won't be displayed even if this method returns //true//.
			 *
			 * It is important to note that the method ''must not modify any property of //item//''.
			 * Doing so would result in an infinite loop, freezing the application's user interface.
			 * This happens because the source list invokes this method to "filter" an item after
			 * any of its properties changes, so by modifying a property this method would be invoking
			 * itself again.
			 *
			 * For most use cases, modifying the {@link Granite.Widgets.SourceList.Item.visible} property is enough.
			 *
			 * The advantage of using this method is that its nature is non-destructive, and the
			 * changes it makes can be easily reverted (see {@link Granite.Widgets.SourceList.refilter}).
			 *
			 * @param item Item to be checked.
			 * @return Whether //item// should be visible or not.
			 * @since 0.2
			 */
			public delegate bool VisibleFunc (Granite.Widgets.SourceList.Item item);
			/**
			 * Creates a new {@link Granite.Widgets.SourceList}.
			 *
			 * @return A new {@link Granite.Widgets.SourceList}.
			 * @since 0.2
			 */
			public SourceList (Granite.Widgets.SourceList.ExpandableItem root = new Granite.Widgets.SourceList.ExpandableItem (""));
			/**
			 * Undoes the effect of {@link Granite.Widgets.SourceList.enable_drag_dest}
			 *
			 * @see Granite.Widgets.SourceList.enable_drag_dest
			 * @since 0.3
			 */
			public void disable_drag_dest ();
			/**
			 * Undoes the effect of {@link Granite.Widgets.SourceList.enable_drag_source}
			 *
			 * @see Granite.Widgets.SourceList.enable_drag_source
			 * @since 0.3
			 */
			public void disable_drag_source ();
			/**
			 * Turns Source List into a //drop destination//.
			 *
			 * This enables items that implement {@link Granite.Widgets.SourceListDragDest}
			 * to receive data from external widgets via drag-and-drop.
			 *
			 * @param dest_entries an array of {@link Gtk.TargetEntry}s indicating the drop
			 * types that Source List items will accept.
			 * @param actions a bitmask of possible actions for a drop onto Source List items.
			 * @see Granite.Widgets.SourceListDragDest
			 * @see Granite.Widgets.SourceList.disable_drag_dest
			 * @since 0.3
			 */
			public void enable_drag_dest (Gtk.TargetEntry[] dest_entries, Gdk.DragAction actions);
			/**
			 * Turns Source List into a //drag source//.
			 *
			 * This enables items that implement {@link Granite.Widgets.SourceListDragSource}
			 * to be dragged outside the Source List and drop data into external widgets.
			 *
			 * @param src_entries an array of {@link Gtk.TargetEntry}s indicating the targets
			 * that the drag will support.
			 * @see Granite.Widgets.SourceListDragSource
			 * @see Granite.Widgets.SourceList.disable_drag_source
			 * @since 0.3
			 */
			public void enable_drag_source (Gtk.TargetEntry[] src_entries);
			/**
			 * Gets the first visible child of an expandable item.
			 *
			 * @param parent Parent of the child to look up.
			 * @return The first visible child of //parent//, or null if it was not found.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_first_child (Granite.Widgets.SourceList.ExpandableItem parent);
			/**
			 * Gets the last visible child of an expandable item.
			 *
			 * @param parent Parent of the child to look up.
			 * @return The last visible child of //parent//, or null if it was not found.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_last_child (Granite.Widgets.SourceList.ExpandableItem parent);
			/**
			 * Gets the number of visible children of an expandable item.
			 *
			 * @param parent Item to query.
			 * @return Number of visible children of //parent//.
			 * @since 0.2
			 */
			public uint get_n_visible_children (Granite.Widgets.SourceList.ExpandableItem parent);
			/**
			 * Gets the next item with respect to //reference//.
			 *
			 * @param reference Item to use as reference.
			 * @return The item that appears after //reference//, or //null// if there's none.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_next_item (Granite.Widgets.SourceList.Item reference);
			/**
			 * Gets the previous item with respect to //reference//.
			 *
			 * @param reference Item to use as reference.
			 * @return The item that appears before //reference//, or //null// if there's none.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_previous_item (Granite.Widgets.SourceList.Item reference);
			/**
			 * Checks whether //item// is part of the source list.
			 *
			 * @param item The item to query.
			 * @return //true// if the item belongs to the source list; //false// otherwise.
			 * @since 0.2
			 */
			public bool has_item (Granite.Widgets.SourceList.Item item);
			/**
			 * Queries the actual expansion state of //item//.
			 *
			 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
			 * @return Whether //item// is expanded or not.
			 * @since 0.2
			 */
			public bool is_item_expanded (Granite.Widgets.SourceList.Item item);
			/**
			 * Applies the filter method set by {@link Granite.Widgets.SourceList.set_filter_func}
			 * to all the items that are part of the current tree.
			 *
			 * @see Granite.Widgets.SourceList.VisibleFunc
			 * @see Granite.Widgets.SourceList.set_filter_func
			 * @since 0.2
			 */
			public void refilter ();
			/**
			 * Scrolls the source list tree to make //item// visible.
			 *
			 * {@link Granite.Widgets.SourceList.ExpandableItem.expand_with_parents} is called
			 * for the item's parent if //expand_parents// is //true//, to make sure it's not
			 * hidden behind a collapsed row.
			 *
			 * If use_align is //false//, then the row_align argument is ignored, and the tree
			 * does the minimum amount of work to scroll the item onto the screen. This means that
			 * the item will be scrolled to the edge closest to its current position. If the item
			 * is currently visible on the screen, nothing is done.
			 *
			 * @param item Item to scroll to.
			 * @param expand_parents Whether to recursively expand item's parent in case they are collapsed.
			 * @param use_align Whether to use the //row_align// argument.
			 * @param row_align The vertical alignment of //item//. 0.0 means top, 0.5 center, and 1.0 bottom.
			 * @return //true// if successful; //false// otherwise.
			 * @since 0.2
			 */
			public bool scroll_to_item (Granite.Widgets.SourceList.Item item, bool expand_parents = true, bool use_align = false, float row_align = 0);
			/**
			 * Sets the method used for filtering out items.
			 *
			 * @param visible_func The method to use for filtering items.
			 * @param refilter Whether to call {@link Granite.Widgets.SourceList.refilter} using the new function.
			 * @see Granite.Widgets.SourceList.VisibleFunc
			 * @see Granite.Widgets.SourceList.refilter
			 * @since 0.2
			 */
			public void set_filter_func (Granite.Widgets.SourceList.VisibleFunc? visible_func, bool refilter);
			/**
			 * Sets the method used for sorting items.
			 *
			 * This method is no longer used. It doesn't do anything. Expandable Items
			 * should implement {@link Granite.Widgets.SourceListSortable} to sort their
			 * children. That interface can also be used for sorting categories by
			 * using a custom root item that implements it.
			 *
			 * @param sort_func The method to use for sorting items.
			 * @since 0.2
			 */
			[Deprecated (replacement = "SourceListSortable.compare", since = "0.2")]
			public void set_sort_func (owned Granite.Widgets.SourceList.SortFunc? sort_func);
			/**
			 * If //item// is editable, this activates the editor; otherwise, it does nothing.
			 * If an item was already being edited, this will fail.
			 *
			 * @param item Item to edit.
			 * @see Granite.Widgets.SourceList.Item.editable
			 * @see Granite.Widgets.SourceList.editing
			 * @see Granite.Widgets.SourceList.stop_editing
			 * @return true if the editing started successfully; false otherwise.
			 * @since 0.2
			 */
			public bool start_editing_item (Granite.Widgets.SourceList.Item item);
			/**
			 * Cancels any editing operation going on.
			 *
			 * @see Granite.Widgets.SourceList.editing
			 * @see Granite.Widgets.SourceList.start_editing_item
			 * @since 0.2
			 */
			public void stop_editing ();
			/**
			 * Whether an item is being edited.
			 *
			 * @see Granite.Widgets.SourceList.start_editing_item
			 * @since 0.2
			 */
			public bool editing { get; }
			/**
			 * Text ellipsize mode.
			 *
			 * @since 0.2
			 */
			public Pango.EllipsizeMode ellipsize_mode { get; set; }
			/**
			 * Root-level expandable item.
			 *
			 * This item contains the first-level source list items. It //only serves as an item container//.
			 * It is used to add and remove items to/from the widget.
			 *
			 * Internally, it allows the source list to connect to its {@link Granite.Widgets.SourceList.ExpandableItem.child_added}
			 * and {@link Granite.Widgets.SourceList.ExpandableItem.child_removed} signals in order to monitor
			 * new children additions/removals.
			 *
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.ExpandableItem root { get; set; }
			/**
			 * The current selected item.
			 *
			 * Setting it to //null// un-selects the previously selected item, if there was any.
			 * {@link Granite.Widgets.SourceList.ExpandableItem.expand_with_parents} is called on the
			 * item's parent to make sure it's possible to select it.
			 *
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? selected { get; set; }
			/**
			 * Sort direction to use along with the sort function.
			 *
			 * This property is no longer used. It doesn't do anything.
			 *
			 * @since 0.2
			 */
			[Deprecated (since = "0.3")]
			public Gtk.SortType sort_direction { get; set; }
			/**
			 * Emitted when the source list selection changes.
			 *
			 * @param item Selected item; //null// if nothing is selected.
			 * @since 0.2
			 */
			public virtual signal void item_selected (Granite.Widgets.SourceList.Item? item);
		}
		/**
		 * This class provides an easy way to manage tabs.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Gtk.Stack", since = "0.3")]
		public class StaticNotebook : Gtk.Box {
			/**
			 * This creates a new StaticNotebook
			 * 
			 * @param show_separator whether or not to show a seperator
			 */
			public StaticNotebook (bool show_separator = true);
			public int append_page (Gtk.Widget widget, Gtk.Label label);
			public void remove_page (int number);
			public void set_switcher_visible (bool val);
			/**
			 * This currently selected page
			 */
			public int page { get; set; }
			public signal void page_changed (int index);
		}
		/**
		 * A status bar with a centered label.
		 *
		 * It supports adding widgets at its left and right sides.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Gtk.ActionBar", since = "0.3")]
		public class StatusBar : Gtk.Toolbar {
			/**
			 * Creates a new StatusBar.
			 */
			public StatusBar ();
			/**
			 * Inserts widget in status bar
			 * 
			 * @param widget widget to insert
			 * @param use_left_side whether or not to use left_side
			 */
			public void insert_widget (Gtk.Widget widget, bool use_left_side = false);
			/**
			 * Sets the text of StatusBar
			 * 
			 * @param text text to set Status bar to
			 */
			public void set_text (string text);
		}
		/**
		 * This is a standard tab which can be used in a notebook to form a tabbed UI.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Tab : Gtk.EventBox {
			/**
			 * An optional delegate that is called when the tab is dropped from the set
			 * of restorable tabs in DynamicNotebook.
			 * A tab is dropped either when Clear All is pressed, or when
			 * the tab is the oldest tab in the set of restorable tabs and
			 * the number of restorable tabs has exceeded the upper limit.
			 */
			public Granite.Widgets.DroppedDelegate dropped_callback;
			public Tab (string label = "", GLib.Icon? icon = null, Gtk.Widget? page = null);
			public void close ();
			public Pango.EllipsizeMode ellipsize_mode { get; set; }
			[Deprecated (since = 0.3)]
			public bool fixed { get; set; }
			public GLib.Icon? icon { owned get; set; }
			public string label { get; set; }
			public Gtk.Menu menu { get; set; }
			public Gtk.Widget page { get; set; }
			public bool pinnable { get; set; }
			public bool pinned { get; set; }
			/**
			 * Data which will be kept once the tab is deleted, and which will be used by
			 * the application to restore the data into the restored tab. Let it empty if
			 * the tab should not be restored.
			 **/
			public string restore_data { get; set; }
			public bool working { get; set; }
		}
		/**
		 * A widget with two adjustable panes.
		 *
		 * A ThinPaned widget draws a thin separator between two child widgets, without
		 * compromising usability, because it offers a wide-enough invisible handle that the user
		 * can drag to adjust the division.
		 *
		 * The size of the invisible handle can be customized through the //"overlay-handle-size"//
		 * style property. For instance:
		 *
		 * {{{
		 * * {
		 *     -GraniteWidgetsThinPaned-overlay-handle-size: 8px;
		 * }
		 * }}}
		 *
		 * @see Gtk.Paned
		 * @since 0.2
		 */
		[CCode (cheader_filename = "granite.h")]
		public class ThinPaned : Gtk.Paned {
			public ThinPaned (Gtk.Orientation orientation = Gtk.Orientation.HORIZONTAL);
			public override bool button_press_event (Gdk.EventButton event);
			public override bool button_release_event (Gdk.EventButton event);
			public override bool draw (Cairo.Context ctx);
			public unowned Gdk.Window get_overlay_handle_window ();
			public override bool grab_broken_event (Gdk.EventGrabBroken event);
			public override void map ();
			public override bool motion_notify_event (Gdk.EventMotion event);
			public override void realize ();
			public override void size_allocate (Gtk.Allocation allocation);
			public override void state_flags_changed (Gtk.StateFlags previous_state);
			public override void unmap ();
			public override void unrealize ();
		}
		/**
		 * This widget allows users to easily pick a time.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class TimePicker : Gtk.Entry {
			public TimePicker ();
			protected virtual void position_dropdown (out int x, out int y);
			/**
			 * Creates a new TimePicker.
			 *
			 * @param format_12 The desired custom 12h format. For example "%l:%M %p".
			 * @param format_24 The desired custom 24h format. For example "%H:%M".
			 */
			public TimePicker.with_format (string format_12, string format_24);
			/**
			 * Format used in 12h mode
			 */
			public string format_12 { get; construct; }
			/**
			 * Format used in 24h mode
			 */
			public string format_24 { get; construct; }
			/**
			 * Current time
			 */
			public GLib.DateTime time { get; set; }
			/**
			 * Sent when the time got changed
			 */
			public signal void time_changed ();
		}
		/**
		 * ToolButtonWithMenu
		 * - support long click / right click with depressed button states
		 * - activate a GtkAction if any or popup a menu
		 * (used in history navigation buttons and the AppMenu)
		 */
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Gtk.MenuButton", since = "0.3")]
		public class ToolButtonWithMenu : Gtk.ToggleToolButton {
			/**
			 * HMenuPosition:
			 */
			public enum HMenuPosition {
				/**
				 * LEFT: Left-align the menu relative to the button's position.
				 */
				LEFT,
				/**
				 * CENTER: Center-align the menu relative to the button's position.
				 */
				CENTER,
				/**
				 * RIGHT: Right-align the menu relative to the button's position.
				 */
				RIGHT,
				/**
				 * INSIDE_WINDOW: Keep the menu inside the GtkWindow. Center-align when possible.
				 */
				INSIDE_WINDOW
			}
			/**
			 * VMenuPosition:
			 */
			public enum VMenuPosition {
				/**
				 * TOP: Align the menu at top of button position.
				 */
				TOP,
				/**
				 * TOP: Align the menu at top of button position.
				 */
				BOTTOM
			}
			/** 
			 * Delegate function used to populate menu 
			 */
			public delegate Gtk.Menu MenuFetcher ();
			public Gtk.Action? myaction;
			public ulong toggled_sig_id;
			public ToolButtonWithMenu (Gtk.Image image, string label, Gtk.Menu menu);
			public ToolButtonWithMenu.from_action (Gtk.Action action);
			public ToolButtonWithMenu.from_stock (string stock_image, Gtk.IconSize size, string label, Gtk.Menu menu);
			protected void popdown_menu ();
			protected new void popup_menu (Gdk.EventButton? ev = null);
			public override void show_all ();
			public Granite.Widgets.ToolButtonWithMenu.MenuFetcher fetcher { get; set; }
			public Granite.Widgets.ToolButtonWithMenu.HMenuPosition horizontal_menu_position { get; set; }
			public Gtk.Menu menu { get; set; }
			public Granite.Widgets.ToolButtonWithMenu.VMenuPosition vertical_menu_position { get; set; }
			public signal void right_click (Gdk.EventButton ev);
		}
		[CCode (cheader_filename = "granite.h")]
		[Deprecated (replacement = "Granite.Widgets.CollapsiblePaned", since = "granite-0.2")]
		public class VCollapsablePaned : Granite.Widgets.CollapsiblePaned {
			public VCollapsablePaned ();
		}
		/**
		 * This class is for making a first-launch screen easily
		 *
		 * It can be used to create a list of one-time action items that need to be executed in order to setup the app. 
		 *
		 * {{../images/Welcome.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Welcome : Gtk.EventBox {
			/**
			 * List of buttons for action items
			 */
			protected GLib.List<Gtk.Button> children;
			/**
			 * Box for action items
			 */
			protected Gtk.Box options;
			/**
			 * Makes new Welcome Page
			 *
			 * @param title_text main title for new Welcome Page
			 * @param subtitle_text subtitle text for new Welcome Page
			 */
			public Welcome (string title_text, string subtitle_text);
			/**
			 * Appends new action item to welcome page with icon
			 *
			 * @param icon_name icon to be set as icon for action item
			 * @param option_text text to be set as the header for action item
			 * @param description_text text to be set as description for action item
			 * @return index of new item
			 */
			public int append (string icon_name, string option_text, string description_text);
			/**
			 * Appends new action item to welcome page with Gtk.Image icon
			 *
			 * @param image image to be set as icon for action item
			 * @param option_text text to be set as the header for action item
			 * @param description_text text to be set as description for action item
			 * @return index of new item
			 */
			public int append_with_image (Gtk.Image? image, string option_text, string description_text);
			/**
			 * Appends new action item to welcome page with Gtk.Pixbuf icon
			 *
			 * @param pixbuf pixbuf to be set as icon for action item
			 * @param option_text text to be set as the header for action item
			 * @param description_text text to be set as description for action item
			 * @return index of new item
			 */
			public int append_with_pixbuf (Gdk.Pixbuf? pixbuf, string option_text, string description_text);
			/**
			 * Removes action item of given index
			 *
			 * @param index index of action item to remove
			 */
			public void remove_item (uint index);
			/**
			 * Sets action item of given index sensitivity
			 *
			 * @param index index of action item to be changed
			 * @param val value deteriming whether the action item is senstitive
			 */
			public void set_item_sensitivity (uint index, bool val);
			/**
			 * Sets action item of given index's visiblity
			 *
			 * @param index index of action item to be changed
			 * @param val value deteriming whether the action item is visible
			 */
			public void set_item_visible (uint index, bool val);
			/**
			 * This is the subtitle of the welcome widget.
			 */
			public string subtitle { get; set; }
			/**
			 * This is the title of the welcome widget.
			 */
			public string title { get; set; }
			public signal void activated (int index);
		}
		/**
		 * This is a label which is automatically wrapped.
		 * If a line is too long, there will be a line break for instance.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class WrapLabel : Gtk.Label {
			public int m_wrap_height;
			public int m_wrap_width;
			/**
			 * Create a new WrapLabel.
			 *
			 * @param str the content of the label
			 */
			public WrapLabel (string? str = null);
			public override void get_preferred_width (out int minimum_width, out int natural_width);
			public override void size_allocate (Gtk.Allocation alloc);
		}
		/**
		 * An interface for receiving data from other widgets via drag-and-drop.
		 *
		 * @since 0.3
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SourceListDragDest : Granite.Widgets.SourceList.Item {
			/**
			 * Determines whether //data// can be dropped into this item.
			 *
			 * @param context The drag context.
			 * @param data {@link Gtk.SelectionData} containing source data.
			 * @return //true// if the drop is possible; //false// otherwise.
			 * @since 0.3
			 */
			public abstract bool data_drop_possible (Gdk.DragContext context, Gtk.SelectionData data);
			/**
			 * If a data drop is deemed possible, then this method is called
			 * when the data is actually dropped into this item. Any actions
			 * consequence of the data received should be handled here.
			 *
			 * @param context The drag context.
			 * @param data {@link Gtk.SelectionData} containing source data.
			 * @return The action taken, or //0// to indicate that the dropped data was not accepted.
			 * @since 0.3
			 */
			public abstract Gdk.DragAction data_received (Gdk.DragContext context, Gtk.SelectionData data);
		}
		/**
		 * An interface for dragging items out of the source list widget.
		 *
		 * @since 0.3
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SourceListDragSource : Granite.Widgets.SourceList.Item {
			/**
			 * Determines whether this item can be dragged outside the source list widget.
			 *
			 * Even if this method returns //false//, the item could still be dragged around
			 * within the source list if its parent allows DnD reordering. This only happens
			 * when the parent implements {@link Granite.Widgets.SourceListSortable}.
			 *
			 * @return //true// if the item can be dragged; //false// otherwise.
			 * @since 0.3
			 * @see Granite.Widgets.SourceListSortable
			 */
			public abstract bool draggable ();
			/**
			 * This method is called when the drop site requests the data which is dragged.
			 *
			 * It is the responsibility of this method to fill //selection_data// with the
			 * data in the format which is indicated by {@link Gtk.SelectionData.get_target}.
			 *
			 * @param selection_data {@link Gtk.SelectionData} containing source data.
			 * @since 0.3
			 * @see Gtk.SelectionData.set
			 * @see Gtk.SelectionData.set_uris
			 * @see Gtk.SelectionData.set_text
			 */
			public abstract void prepare_selection_data (Gtk.SelectionData selection_data);
		}
		/**
		 * An interface for sorting items.
		 *
		 * @since 0.3
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SourceListSortable : Granite.Widgets.SourceList.ExpandableItem {
			/**
			 * Whether this item will allow users to re-arrange its children via DnD.
			 *
			 * This feature can co-exist with a sort algorithm (implemented
			 * by {@link Granite.Widgets.SourceListSortable.compare}), but
			 * the actual order of the items in the list will always
			 * honor that method. The sort function has to be compatible with
			 * the kind of DnD reordering the item wants to allow, since the user can
			 * only reorder those items for which //compare// returns 0.
			 *
			 * @return Whether the item's children can be re-arranged by users.
			 * @since 0.3
			 */
			public abstract bool allow_dnd_sorting ();
			/**
			 * Should return a negative integer, zero, or a positive integer if ''a''
			 * sorts //before// ''b'', ''a'' sorts //with// ''b'', or ''a'' sorts
			 * //after// ''b'' respectively. If two items compare as equal, their
			 * order in the sorted source list is undefined.
			 *
			 * In order to ensure that the source list behaves as expected, this
			 * method must define a partial order on the source list tree; i.e. it
			 * must be reflexive, antisymmetric and transitive. Not complying with
			 * those requirements could make the program fall into an infinite loop
			 * and freeze the user interface.
			 *
			 * Should return //0// to allow any pair of items to be sortable via DnD.
			 *
			 * @param a First item.
			 * @param b Second item.
			 * @return A //negative// integer if //a// sorts before //b//,
			 *         //zero// if //a// equals //b//, or a //positive//
			 *         integer if //a// sorts after //b//.
			 * @since 0.3
			 */
			public abstract int compare (Granite.Widgets.SourceList.Item a, Granite.Widgets.SourceList.Item b);
			/**
			 * Emitted after a user has re-ordered an item via DnD.
			 *
			 * @param moved The item that was moved to a different position by the user.
			 * @since 0.3
			 */
			public signal void user_moved_item (Granite.Widgets.SourceList.Item moved);
		}
		[CCode (cheader_filename = "granite.h")]
		public delegate void DroppedDelegate ();
		[CCode (cheader_filename = "granite.h")]
		public static void show_about_dialog (Gtk.Window* parent, string first, ...);
	}
	/**
	 * This is the base class for all Granite-based apps. It has methods that help
	 * to create a great deal of an app's functionality.
	 */
	[CCode (cheader_filename = "granite.h")]
	public abstract class Application : Gtk.Application {
		protected static bool ABOUT;
		protected static bool DEBUG;
		/**
		 * Names of the designers of the application's user interface.
		 */
		public string[] about_artists;
		/**
		 * Full names of the application authors for the about dialog.
		 */
		public string[] about_authors;
		public string about_comments;
		protected Granite.Widgets.AboutDialog about_dlg;
		/**
		 * Full names of documenters of the app for the about dialog.
		 */
		public string[] about_documenters;
		/**
		 * The copyright license that the work is distributed under.
		 */
		public string about_license;
		public Gtk.License about_license_type;
		/**
		 * Names of the translators of the application.
		 */
		public string about_translators;
		/**
		 * Years that the copyright extends to. Usually from the start 
		 * of the project to the most recent modification to it.
		 */
		public string app_copyright;
		/**
		 * Icon to be associated with the application.
		 * 
		 * This is either the name of an icon shipped by the icon theme,
		 * or the name of an icon shipped with the app (for custom icons).
		 * The name should not include the full path or file extension.
		 * WRONG: /usr/share/icons/myicon.png RIGHT: myicon
		 */
		public string app_icon;
		/**
		 * The launcher to be associated with this application.
		 *
		 * This should be the name of a file in /usr/share/applications/.
		 * See [[http://standards.freedesktop.org/desktop-entry-spec/latest/]]
		 * for more information.
		 */
		public string app_launcher;
		public string app_years;
		/**
		 * A link to the software's public bug tracker.
		 *
		 * If the application does not have a bug tracker, one should be
		 * created on launchpad.net.
		 */
		public string bug_url;
		public string build_data_dir;
		public string build_pkg_data_dir;
		public string build_release_name;
		public string build_version;
		public string build_version_info;
		/**
		 * The compiled binary name, which must match the CMake exec name.
		 * This is used to launch the application from a launcher or the
		 * command line.
		 */
		public string exec_name;
		/**
		 * Link to question and answer site or support forum for the app.
		 *
		 * Launchpad offers a QA service if one is needed.
		 */
		public string help_url;
		/**
		 * Main website or homepage for the application.
		 *
		 * If the application has no homepage, one should be created on
		 * launchpad.net.
		 */
		public string main_url;
		/**
		 * The user facing name of the application. This name is used
		 * throughout the application and should be capitalized correctly.
		 */
		public string program_name;
		/**
		 * Link to where users can translate the application.
		 *
		 * Launchad offers a translation service if one is necessary.
		 */
		public string translate_url;
		protected const GLib.OptionEntry[] options;
		/**
		 * This creates a new Application class
		 */
		public Application ();
		/**
		 * This methods creates a new App Menu
		 *
		 * @param menu the menu to create the App Menu for
		 *
		 * @return app_menu
		 */
		public Granite.Widgets.AppMenu create_appmenu (Gtk.Menu menu);
		[CCode (cheader_filename = "sys/prctl.h", cname = "prctl")]
		protected static int prctl (int option, string arg2, ulong arg3, ulong arg4, ulong arg5);
		/**
		 * This method runs the application
		 *
		 * @param args array of arguments
		 */
		public new int run (string[] args);
		protected virtual void set_options ();
		/**
		 * This method shows the about dialog of this app.
		 *
		 * @param parent This widget is the window that is calling the about page being created.
		 */
		public virtual void show_about (Gtk.Widget parent);
	}
	[CCode (cheader_filename = "granite.h")]
	public enum CloseButtonPosition {
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "granite.h")]
	public enum CollapseMode {
		NONE,
		LEFT,
		TOP,
		FIRST,
		RIGHT,
		BOTTOM,
		LAST
	}
	[CCode (cheader_filename = "granite.h")]
	public enum TextStyle {
		/**
		 * Highest level header
		 */
		TITLE,
		/**
		 * Second highest header
		 */
		H1,
		/**
		 * Third highest header
		 */
		H2,
		/**
		 * Fourth Highest Header
		 */
		H3;
		/**
		 * Gets style sheet of text style
		 *
		 * @return CSS of text style
		 */
		public string get_stylesheet (out string style_class = null);
	}
	/**
	 * Global deprecated object..
	 */
	[CCode (cheader_filename = "granite.h")]
	[Deprecated (since = "granite-0.1")]
	public static Granite.Application app;
}
